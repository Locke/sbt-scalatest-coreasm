package de.athalis.sbt.testcoreasm

import sbt._
import sbt.Keys._

object ScalatestCoreASMPlugin extends AutoPlugin {
  override def requires = plugins.JvmPlugin

  object autoImport {
    lazy val TestCoreASM = config("test-coreasm") extend (Test)

    lazy val generateCoreASMTests = taskKey[Seq[File]]("generate scalatest classes for CoreASM specifications")
  }

  import autoImport._

  lazy val baseTestCoreASMSettings = Def.settings(
    sourceDirectory <<= (sourceDirectory in Test) { _ / "coreasm" },
    sourceManaged <<= (sourceManaged in Test) { _ / "coreasm" },

    includeFilter := ("*.casm" || "*.coreasm"),
    excludeFilter := HiddenFileFilter,

    sources <<= (sourceDirectory, includeFilter, excludeFilter) map {
      (srcDir, incl, excl) => (srcDir * (incl -- excl)).get
    },

    generateCoreASMTests := {
      val cachedFun = FileFunction.cached(streams.value.cacheDirectory, FilesInfo.lastModified, FilesInfo.lastModified) {
        (in: Set[File]) =>
          Generator(in, sourceManaged.value) : Set[File]
      }
      cachedFun(sources.value.toSet).toSeq
    }
  )

  override lazy val projectSettings =
    inConfig(TestCoreASM)(baseTestCoreASMSettings) ++
    Def.settings(
      libraryDependencies ++= Seq("de.athalis" %% "sbt-scalatest-coreasm-lib" % BuildInfo.version % "test"),

      (sourceGenerators in Test) <+= (generateCoreASMTests in TestCoreASM),
      (managedSourceDirectories in Test) <+= (sourceManaged in TestCoreASM),
      cleanFiles <+= (sourceManaged in TestCoreASM)
    )
}

object Generator {
  private val info = "%s, version: %s, scalaVersion: %s, sbtVersion: %s" format (BuildInfo.name, BuildInfo.version, BuildInfo.scalaVersion, BuildInfo.sbtVersion)

  private val template = 
"""package de.athalis.sbt.testcoreasm

/*
This file is automatically generated by %s.
Do not modify this file -- YOUR CHANGES WILL BE ERASED!
*/

import java.io.{ File => JFile }
import java.nio.file.{ Path => JPath }

class TestCoreASM extends TestAllCasm {
  def testFiles: Seq[JPath] = %s
}
"""

  def apply(files: Set[File], outDir: File): Set[File] = {
    val filesAbsolute = files.map(f => "new JFile(\"\"\""+f.getAbsolutePath+"\"\"\")")

    val filesSeq = filesAbsolute.mkString("Seq(", ", ", ").map(_.toPath)")

    val source = template format (info, filesSeq)

    val outFile = outDir / "TestCoreASM.scala"
    IO.write(outFile, source)

    Set(outFile)
  }
}

